[{"C:\\Users\\monkey\\Desktop\\Schooolz\\Web\\React.JS\\react\\react-app\\src\\index.js":"1","C:\\Users\\monkey\\Desktop\\Schooolz\\Web\\React.JS\\react\\react-app\\src\\App.js":"2","C:\\Users\\monkey\\Desktop\\Schooolz\\Web\\React.JS\\react\\react-app\\src\\components\\PersonList.jsx":"3","C:\\Users\\monkey\\Desktop\\Schooolz\\Web\\React.JS\\react\\react-app\\src\\components\\CreatePerson.jsx":"4","C:\\Users\\monkey\\Desktop\\Schooolz\\Web\\React.JS\\react\\react-app\\src\\components\\PersonDetails.jsx":"5","C:\\Users\\monkey\\Desktop\\Schooolz\\Web\\React.JS\\react\\react-app\\src\\api\\ThePersonService.js":"6"},{"size":765,"mtime":1611596381433,"results":"7","hashOfConfig":"8"},{"size":4787,"mtime":1612545385753,"results":"9","hashOfConfig":"8"},{"size":1167,"mtime":1612531384001,"results":"10","hashOfConfig":"8"},{"size":5296,"mtime":1612536328335,"results":"11","hashOfConfig":"8"},{"size":1459,"mtime":1612534119604,"results":"12","hashOfConfig":"8"},{"size":2837,"mtime":1612542597452,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ys32ms",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\monkey\\Desktop\\Schooolz\\Web\\React.JS\\react\\react-app\\src\\index.js",[],["29","30"],"C:\\Users\\monkey\\Desktop\\Schooolz\\Web\\React.JS\\react\\react-app\\src\\App.js",["31"],"import React, { Component } from 'react'\r\nimport PersonList from './components/PersonList'\r\nimport CreatePerson from './components/CreatePerson'\r\nimport PersonDetails from './components/PersonDetails'\r\nimport PersonService from './api/ThePersonService'\r\n\r\nexport default class App extends React.Component {\r\n   state = {\r\n      persons: [],\r\n      allCities: [],\r\n      allCountries: [],\r\n      allLanguages: [],\r\n      personToShowDetailsOf: null,\r\n      editPerson: null,\r\n      personsSortedBy: \"unsorted\",\r\n      numSortedPersons: 0,\r\n      showCreatePerson: false,\r\n      loadingLeft: true,\r\n      loadingRight: false\r\n   }\r\n\r\n   componentDidMount = () => {\r\n      (async () => {\r\n         let data = await PersonService.getAll();\r\n         this.setState({ persons: data, loadingLeft: false });\r\n      }).call();\r\n   }\r\n\r\n   sortPersons = (sortBy) => {\r\n      let numPersons = this.state.persons.length;\r\n      if (sortBy !== this.state.personsSortedBy || numPersons > this.state.numSortedPersons) {\r\n         this.setState({\r\n            persons: this.state.persons.sort((a, b) => (\"\" + a[sortBy]).localeCompare(b[sortBy])),\r\n            personsSortedBy: sortBy,\r\n            numSortedPersons: numPersons\r\n         });\r\n      }\r\n      else this.setState({ persons: this.state.persons.reverse() });\r\n   }\r\n\r\n   removePerson = (personToRemove) => {\r\n      this.setState({ persons: this.state.persons.filter((person) => { return person.id !== personToRemove.id }), personToShowDetailsOf: null })\r\n      PersonService.delete(personToRemove.id)\r\n   }\r\n   showAddPerson = (isEditing) => {\r\n      if(this.state.showCreatePerson)\r\n         return;\r\n      this.setState({loadingRight: true});\r\n      (async () => {\r\n         this.setState({ \r\n            allCountries: await PersonService.getAllCountries(), \r\n            allLanguages: await PersonService.getAllLanguages(), \r\n            showCreatePerson: true, \r\n            editPerson: isEditing? this.state.editPerson : null,\r\n            loadingRight: false });\r\n      }).call();\r\n   }\r\n   addPerson = (newPerson, addPersonFail) => {\r\n      (async () => {\r\n         newPerson = newPerson.id < 1? await PersonService.add(newPerson) : await PersonService.put(newPerson);\r\n         if (newPerson !== null)\r\n            this.setState({\r\n               persons: [newPerson, ...this.state.persons.filter((person) => { return person.id !== newPerson.id })],\r\n               personToShowDetailsOf: newPerson,\r\n               showCreatePerson: false,\r\n               editPerson: null\r\n            })\r\n         else addPersonFail.call();\r\n      }).call();\r\n   }\r\n   showDetails = (person) => {\r\n      if(this.state.personToShowDetailsOf !== null && this.state.personToShowDetailsOf.id === person.id)\r\n         return;\r\n      this.setState({loadingRight: true});\r\n      (async () => {\r\n         person = await PersonService.get(person.id);\r\n         this.setState({ personToShowDetailsOf: person, showCreatePerson: false, loadingRight: false })\r\n      }).call();\r\n   }\r\n   editDetails = () => {\r\n      this.setState({editPerson: this.state.personToShowDetailsOf});\r\n      this.showAddPerson(true);\r\n   }\r\n   filterCities = (countryId) => {\r\n      if(isNaN(countryId))\r\n         return;\r\n      (async () => {\r\n         this.setState({ allCities: await PersonService.getCitiesOfCountry(countryId)});\r\n      }).call();\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div className=\"container\">\r\n            <h1>People Register</h1>\r\n            <main>\r\n               {this.leftSide()}\r\n               {this.rightSide()}\r\n            </main>\r\n         </div>\r\n      )\r\n   }\r\n\r\n   leftSide = () => {\r\n      return (\r\n         <section className=\"borderRight\">\r\n            <PersonList persons={this.state.persons} sortPersons={this.sortPersons} showDetails={this.showDetails} />\r\n            {this.state.loadingLeft && <h3>Loading...</h3>}\r\n            <button className=\"button-good\" onClick={() => this.showAddPerson()}>&nbsp;+&nbsp;</button>\r\n         </section>)\r\n   }\r\n\r\n   rightSide = () => {\r\n      if (this.state.loadingRight)\r\n         return <h3>Loading...</h3>\r\n      else\r\n         return (\r\n            <section>\r\n               {this.state.showCreatePerson ?\r\n                  <CreatePerson editPerson={this.state.editPerson} addPerson={this.addPerson} filterCities={this.filterCities} allCities={this.state.allCities}  allCountries={this.state.allCountries} allLanguages={this.state.allLanguages} />\r\n                  : this.state.personToShowDetailsOf !== null ?\r\n                     <PersonDetails person={this.state.personToShowDetailsOf} removePerson={this.removePerson} editDetails={this.editDetails} />\r\n                     :\r\n                     <h2>Good Morning !</h2>\r\n               }\r\n            </section>)\r\n   }\r\n}","C:\\Users\\monkey\\Desktop\\Schooolz\\Web\\React.JS\\react\\react-app\\src\\components\\PersonList.jsx",[],"C:\\Users\\monkey\\Desktop\\Schooolz\\Web\\React.JS\\react\\react-app\\src\\components\\CreatePerson.jsx",["32"],"import React, { Component } from 'react'\r\n\r\nexport default class CreatePerson extends Component {\r\n   initialState = {\r\n      id: -1,\r\n      name: '',\r\n      phoneNumber: '',\r\n      country: 'Select Country',\r\n      city: 'Select City',\r\n      languages: [],\r\n      nameError: false,\r\n      phoneNumberError: false,\r\n      countryError: false,\r\n      cityError: false,\r\n      criticalError: false\r\n   }\r\n   state = this.initialState;\r\n\r\n   componentDidMount(){\r\n      const editPerson = this.props.editPerson;\r\n      if(editPerson != null)\r\n      {\r\n         this.setState({\r\n            id: editPerson.id, \r\n            name: editPerson.name, \r\n            phoneNumber: editPerson.phoneNumber, \r\n            country: editPerson.city.country.id, \r\n            city: editPerson.city.id, \r\n            languages: editPerson.languages.map((lang) => {return lang.id} )\r\n         })\r\n         this.props.filterCities(editPerson.city.country.id);\r\n      }\r\n      \r\n   }\r\n\r\n   handleChange = (event) => {\r\n      const { name, value } = event.target\r\n      this.setState({\r\n         [name]: value,\r\n      })\r\n   }\r\n   handleMultiSelect = (event) => {\r\n      const { name, value } = event.target\r\n      this.setState({\r\n         [name]: Array.from(event.target.selectedOptions, (item) => item.value),\r\n      })\r\n   }\r\n\r\n   submitForm = (event) => {\r\n      event.preventDefault();\r\n      if (this.validateForm(this.state)) \r\n         this.props.addPerson(this.state, this.addPersonFail);\r\n   }\r\n   addPersonFail = () => {\r\n      this.setState({ criticalError: true });\r\n   }\r\n\r\n   validateForm = (formData) => {\r\n      let nameError        = (formData.name.length < 6 || formData.name.length >= 40);\r\n      let phoneNumberError = (formData.phoneNumber.length < 6 || formData.phoneNumber.length >= 20);\r\n      let countryError     = isNaN(formData.country);\r\n      let cityError        = isNaN(formData.city);\r\n      this.setState({ nameError: (formData.name.length < 6 || formData.name.length >= 40), phoneNumberError: phoneNumberError, cityError: cityError, countryError: countryError, criticalError: false })\r\n      return !(nameError || phoneNumberError || cityError || countryError);\r\n   }\r\n\r\n   render() {\r\n      const { name, city, country, languages, phoneNumber } = this.state;\r\n      return (\r\n         <form>\r\n            <h2>{this.props.editPerson === null? \"Add Person\" : \"Edit Person\"}</h2>\r\n\r\n            <label htmlFor=\"name\">Name</label>\r\n            <input\r\n               type=\"text\"\r\n               name=\"name\"\r\n               id=\"name\"\r\n               value={name}\r\n               onChange={this.handleChange} />\r\n            {this.state.nameError && <span className=\"error-text\">Name must be longer than 6 characters.</span>}\r\n\r\n            <label htmlFor=\"phoneNumber\">Phone Number</label>\r\n            <input\r\n               type=\"text\"\r\n               name=\"phoneNumber\"\r\n               id=\"phoneNumber\"\r\n               value={phoneNumber}\r\n               onChange={this.handleChange} />\r\n            {this.state.phoneNumberError && <span className=\"error-text\">Phone Number must be longer than 6 characters.</span>}\r\n            \r\n            <label htmlFor=\"country\">Country</label>\r\n            <select\r\n               type=\"text\"\r\n               name=\"country\"\r\n               id=\"country\"\r\n               value={country}\r\n               onChange={(event) => { this.handleChange(event); this.props.filterCities(event.target.value); this.setState({city: \"Select City\"}); }}>\r\n               <option>Select Country</option>\r\n               {this.props.allCountries.map((oneCountry, index) => { return <option key={index} value={oneCountry.id}>{oneCountry.name}</option>; })}\r\n            </select>\r\n            {this.state.countryError && <span className=\"error-text\">Please select a Country.</span>}\r\n               \r\n            {!isNaN(country) &&\r\n               <div>\r\n                  <label htmlFor=\"city\">City</label>\r\n                  <select\r\n                     type=\"text\"\r\n                     name=\"city\"\r\n                     id=\"city\"\r\n                     value={city}\r\n                     onChange={this.handleChange}>\r\n                     <option>Select City</option>\r\n                     {this.props.allCities.map((oneCity, index) => { return <option key={index} value={oneCity.id}>{oneCity.name}</option>; })}\r\n                  </select>\r\n                  {this.state.cityError && <span className=\"error-text\">Please select a City.</span>}\r\n               </div>\r\n            }\r\n\r\n            <label htmlFor=\"languages\">Languages</label>\r\n            <select\r\n               multiple\r\n               type=\"text\"\r\n               name=\"languages\"\r\n               id=\"languages\"\r\n               value={languages}\r\n               onChange={this.handleMultiSelect}>\r\n               {this.props.allLanguages.map((oneLanguage, index) => { return <option key={index} value={oneLanguage.id}>{oneLanguage.name}</option>; })}\r\n            </select>\r\n\r\n            {this.state.criticalError && <span className=\"error-text\">CRITICAL ERROR, PLEASE TRY AGEN LATER !!!</span>}\r\n            <input className=\"button-good\" type=\"submit\" value={this.props.editPerson === null? \"Add\" : \"Save\"} onClick={this.submitForm} />\r\n\r\n         </form>\r\n      );\r\n   }\r\n\r\n\r\n}\r\n\r\n\r\n","C:\\Users\\monkey\\Desktop\\Schooolz\\Web\\React.JS\\react\\react-app\\src\\components\\PersonDetails.jsx",[],"C:\\Users\\monkey\\Desktop\\Schooolz\\Web\\React.JS\\react\\react-app\\src\\api\\ThePersonService.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":1,"column":17,"nodeType":"39","messageId":"40","endLine":1,"endColumn":26},{"ruleId":"37","severity":1,"message":"41","line":43,"column":21,"nodeType":"39","messageId":"40","endLine":43,"endColumn":26},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'value' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]